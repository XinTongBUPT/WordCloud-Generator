Use modern functional JavaScript style everywhere. Avoid assignment-heavy state-mutating code.
Build tiny vertical slices of end-to-end user value.
Implement static data display first, static state display second, interaction last.
Style from the start.
More on this below.

Even if you know React, do this activity. Very few students have yet learned how to use React with Hooks well. If you're not sure, take a look at this first code sample.
Prerequisites
Brush Up on Modern JavaScript
You should be familiar with modern JavaScript coding. Much has changed in the past few years. A good reference is Modern JavaScript. A good one-page resource for React is the React Handbook.

Install your Tools
Install NodeJS. If you already have, be sure it's up to date. You need npx from the new versions of Node to run the create-react-app script.

Install the React Devtools for your browser. create-react-app does a lot of repackaging of your source HTML and JavaScript for deployment. The HTML and JavaScript the browser gets is very different from what you wrote. The devtools read metadata generated by create-react-app so that you can interact with your original source in the browser debuggers.

Do the Quick, React! Tutorial
Do the Quick, React! tutorial. This introduces the essential JavaScript and React programming concepts needed to get a React app going on a clean solid basis. It includes functional components, stylng, fetching data, interactive UI state handling, working with the Firebase real-time database, and authentication with Firebase.

It follows the Agile approach of implementing applications in very thin end-to-end vertical slices, using the React development process described in the Thinking in React tutorial:

Create the data or state.
Implement and test static display of the data or state.
Finally, implement user interactions.
A slice is a thin bit of your app, including user interface and back end. Do not do all front-end first, or all back-end first. What you choose to do in each slice is largely up to you, but it should something that either provides the most value for the end user or reduces the most risk on the technical side.

The App
This activity challenges you to build a moderately complicated shopping cart app.

If you are doing this in one of my courses, I will provide spreadsheet for reporting progress, via Canvas. This is where you will enter links to your repo, your app's public site, and the various commits along the way that commplete each subtask.

Your goal is to build an app very similar to this shopping cart app.

Play with this app briefly to see how it works. Some parts of it are obvious. Some parts are not, e.g., how to remove an item from the cart, and what text like "9 x $1.21" means.

Backlog
Here is the prioritized backlog of user stories for your app, broken down into user-testable releases.

Release 1: Catalog page
Shoppers can see a catalog page of all available T-shirts with names, prices, sizes, and pictures.
Release 2: Basic shopping
Shoppers can add a shirt to their shopping cart by clicking on one of the size buttons.
The same shirt and size can be added more than once.
Shoppers can see what they've selected so far and the total cost.
Shoppers can remove a shirt from their cart.
Release 3: Persistence and Inventory
A shopper can log in so that their shopping cart is automatically saved and available from any device.
A shopper always see what is currently in stock.
Create your app repository
Use create-react-app to create an empty shell for your shopping cart app.

npx create-react-app new-shopping-cart
Test that your empty app runs.

cd new-shopping-cart
npm start
The React web page should open in your browser.

Stop the server.

Create a repo for your app on github. Commit your code to it.

Put your name and a clickable link to the Github repo in the Learn React Report spreadsheet (link on Canvas).

Commit often to your local repo. Commit to github when something new works, but never break master.
Go public
Even though you don't have anything real yet, set up a public host for your project, so that you can user test and show your client, e.g., me., where you're at.

There are many web hosting services for dynamic web apps running NodeJS, such as Firebase, Heroku, and AWS. We’ll give instructions for Firebase. It provides three services for free that we need here: hosting, authentication, and a database.

Create an account at Firebase, if you don’t already have one.

Create a Firebase project at Firebase. This will be the back-end for your app. You can call it anything, but choose something the same as or close to your app name.

Add a database to the Firebase project. Be sure to choose the real-time database, not Firestore. Create it in test mode, to avoid permission issues.

In a terminal window on your machine, install the Firebase CLI globally with

npm install -g firebase-tools
Switch into your local app directory and initialize your app's Firebase configuration:

firebase init
Choose both hosting and the real-time database.

More on setting up Firebase apps.

When initialization finishes, build and deploy

npm run build
firebase deploy
This will assemble your app and deploy it to Firebase.

If deployment fails, it's probably because you are not logged into Firebase. Do firebase login and try to deploy again.
Open the URL for your app generated by Firebase. Verify that the app is working, images and all.

Create and commit your working app to github. Put your public URL on the report spreadsheet.

From this point on, your process for closing each task will be

Code until the app works locally, using npm start.
Build with npm run build, deploy with firebase deploy, and test your public version
Commit to Github.
Enter the link to the commit into the progress report spreadsheet.
Implement a static page
Always start an app by building the static view. This will give you something you can test and show to users, and provide the basis for designing the interactive parts. There are several steps to creating a static catalog page.

Create the data to display.
Sketch the user interface, in terms of logical components.
Implement the components as data-driven React components and HTML
Design and test your data
Always use realistic data. No dummy "lorem ipsum" stuff. Keep the amount of data small but complete enough to demonstrate the user stories you want to implement first.
